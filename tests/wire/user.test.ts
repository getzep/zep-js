/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ZepClient } from "../../src/Client";

describe("User", () => {
    test("add", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { user_id: "user_id" };
        const rawResponseBody = {
            created_at: "created_at",
            deleted_at: "deleted_at",
            email: "email",
            fact_rating_instruction: {
                examples: { high: "high", low: "low", medium: "medium" },
                instruction: "instruction",
            },
            first_name: "first_name",
            id: 1,
            last_name: "last_name",
            metadata: { key: "value" },
            project_uuid: "project_uuid",
            session_count: 1,
            updated_at: "updated_at",
            user_id: "user_id",
            uuid: "uuid",
        };
        server
            .mockEndpoint()
            .post("/users")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.add({
            userId: "user_id",
        });
        expect(response).toEqual({
            createdAt: "created_at",
            deletedAt: "deleted_at",
            email: "email",
            factRatingInstruction: {
                examples: {
                    high: "high",
                    low: "low",
                    medium: "medium",
                },
                instruction: "instruction",
            },
            firstName: "first_name",
            id: 1,
            lastName: "last_name",
            metadata: {
                key: "value",
            },
            projectUuid: "project_uuid",
            sessionCount: 1,
            updatedAt: "updated_at",
            userId: "user_id",
            uuid: "uuid",
        });
    });

    test("listOrdered", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            row_count: 1,
            total_count: 1,
            users: [
                {
                    created_at: "created_at",
                    deleted_at: "deleted_at",
                    email: "email",
                    first_name: "first_name",
                    id: 1,
                    last_name: "last_name",
                    metadata: { key: "value" },
                    project_uuid: "project_uuid",
                    session_count: 1,
                    updated_at: "updated_at",
                    user_id: "user_id",
                    uuid: "uuid",
                },
            ],
        };
        server.mockEndpoint().get("/users-ordered").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.listOrdered();
        expect(response).toEqual({
            rowCount: 1,
            totalCount: 1,
            users: [
                {
                    createdAt: "created_at",
                    deletedAt: "deleted_at",
                    email: "email",
                    firstName: "first_name",
                    id: 1,
                    lastName: "last_name",
                    metadata: {
                        key: "value",
                    },
                    projectUuid: "project_uuid",
                    sessionCount: 1,
                    updatedAt: "updated_at",
                    userId: "user_id",
                    uuid: "uuid",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            created_at: "created_at",
            deleted_at: "deleted_at",
            email: "email",
            fact_rating_instruction: {
                examples: { high: "high", low: "low", medium: "medium" },
                instruction: "instruction",
            },
            first_name: "first_name",
            id: 1,
            last_name: "last_name",
            metadata: { key: "value" },
            project_uuid: "project_uuid",
            session_count: 1,
            updated_at: "updated_at",
            user_id: "user_id",
            uuid: "uuid",
        };
        server.mockEndpoint().get("/users/userId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.get("userId");
        expect(response).toEqual({
            createdAt: "created_at",
            deletedAt: "deleted_at",
            email: "email",
            factRatingInstruction: {
                examples: {
                    high: "high",
                    low: "low",
                    medium: "medium",
                },
                instruction: "instruction",
            },
            firstName: "first_name",
            id: 1,
            lastName: "last_name",
            metadata: {
                key: "value",
            },
            projectUuid: "project_uuid",
            sessionCount: 1,
            updatedAt: "updated_at",
            userId: "user_id",
            uuid: "uuid",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "message" };
        server.mockEndpoint().delete("/users/userId").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.delete("userId");
        expect(response).toEqual({
            message: "message",
        });
    });

    test("update", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = {
            created_at: "created_at",
            deleted_at: "deleted_at",
            email: "email",
            fact_rating_instruction: {
                examples: { high: "high", low: "low", medium: "medium" },
                instruction: "instruction",
            },
            first_name: "first_name",
            id: 1,
            last_name: "last_name",
            metadata: { key: "value" },
            project_uuid: "project_uuid",
            session_count: 1,
            updated_at: "updated_at",
            user_id: "user_id",
            uuid: "uuid",
        };
        server
            .mockEndpoint()
            .patch("/users/userId")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.update("userId");
        expect(response).toEqual({
            createdAt: "created_at",
            deletedAt: "deleted_at",
            email: "email",
            factRatingInstruction: {
                examples: {
                    high: "high",
                    low: "low",
                    medium: "medium",
                },
                instruction: "instruction",
            },
            firstName: "first_name",
            id: 1,
            lastName: "last_name",
            metadata: {
                key: "value",
            },
            projectUuid: "project_uuid",
            sessionCount: 1,
            updatedAt: "updated_at",
            userId: "user_id",
            uuid: "uuid",
        });
    });

    test("get_node", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            node: {
                attributes: { key: "value" },
                created_at: "created_at",
                labels: ["labels"],
                name: "name",
                score: 1.1,
                summary: "summary",
                uuid: "uuid",
            },
        };
        server.mockEndpoint().get("/users/userId/node").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.user.getNode("userId");
        expect(response).toEqual({
            node: {
                attributes: {
                    key: "value",
                },
                createdAt: "created_at",
                labels: ["labels"],
                name: "name",
                score: 1.1,
                summary: "summary",
                uuid: "uuid",
            },
        });
    });

    test("get_threads", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                created_at: "created_at",
                project_uuid: "project_uuid",
                thread_id: "thread_id",
                user_id: "user_id",
                uuid: "uuid",
            },
        ];
        server
            .mockEndpoint()
            .get("/users/userId/threads")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.user.getThreads("userId");
        expect(response).toEqual([
            {
                createdAt: "created_at",
                projectUuid: "project_uuid",
                threadId: "thread_id",
                userId: "user_id",
                uuid: "uuid",
            },
        ]);
    });
});
