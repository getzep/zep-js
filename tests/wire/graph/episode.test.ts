/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import { ZepClient } from "../../../src/Client";

describe("Episode", () => {
    test("get_by_graph_id", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            episodes: [
                {
                    content: "content",
                    created_at: "created_at",
                    processed: true,
                    role: "role",
                    role_type: "norole",
                    session_id: "session_id",
                    source: "text",
                    source_description: "source_description",
                    uuid: "uuid",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/graph/episodes/graph/graph_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.episode.getByGraphId("graph_id");
        expect(response).toEqual({
            episodes: [
                {
                    content: "content",
                    created_at: "created_at",
                    processed: true,
                    role: "role",
                    role_type: "norole",
                    session_id: "session_id",
                    source: "text",
                    source_description: "source_description",
                    uuid: "uuid",
                },
            ],
        });
    });

    test("get_by_user_id", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            episodes: [
                {
                    content: "content",
                    created_at: "created_at",
                    processed: true,
                    role: "role",
                    role_type: "norole",
                    session_id: "session_id",
                    source: "text",
                    source_description: "source_description",
                    uuid: "uuid",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/graph/episodes/user/user_id")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.episode.getByUserId("user_id");
        expect(response).toEqual({
            episodes: [
                {
                    content: "content",
                    created_at: "created_at",
                    processed: true,
                    role: "role",
                    role_type: "norole",
                    session_id: "session_id",
                    source: "text",
                    source_description: "source_description",
                    uuid: "uuid",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            content: "content",
            created_at: "created_at",
            processed: true,
            role: "role",
            role_type: "norole",
            session_id: "session_id",
            source: "text",
            source_description: "source_description",
            uuid: "uuid",
        };
        server
            .mockEndpoint()
            .get("/graph/episodes/uuid")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.episode.get("uuid");
        expect(response).toEqual({
            content: "content",
            created_at: "created_at",
            processed: true,
            role: "role",
            role_type: "norole",
            session_id: "session_id",
            source: "text",
            source_description: "source_description",
            uuid: "uuid",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .delete("/graph/episodes/uuid")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.episode.delete("uuid");
        expect(response).toEqual({
            message: "message",
        });
    });

    test("get_nodes_and_edges", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            edges: [
                {
                    attributes: { key: "value" },
                    created_at: "created_at",
                    episodes: ["episodes"],
                    expired_at: "expired_at",
                    fact: "fact",
                    invalid_at: "invalid_at",
                    name: "name",
                    source_node_uuid: "source_node_uuid",
                    target_node_uuid: "target_node_uuid",
                    uuid: "uuid",
                    valid_at: "valid_at",
                },
            ],
            nodes: [
                {
                    attributes: { key: "value" },
                    created_at: "created_at",
                    labels: ["labels"],
                    name: "name",
                    summary: "summary",
                    uuid: "uuid",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/graph/episodes/uuid/mentions")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.episode.getNodesAndEdges("uuid");
        expect(response).toEqual({
            edges: [
                {
                    attributes: {
                        key: "value",
                    },
                    created_at: "created_at",
                    episodes: ["episodes"],
                    expired_at: "expired_at",
                    fact: "fact",
                    invalid_at: "invalid_at",
                    name: "name",
                    source_node_uuid: "source_node_uuid",
                    target_node_uuid: "target_node_uuid",
                    uuid: "uuid",
                    valid_at: "valid_at",
                },
            ],
            nodes: [
                {
                    attributes: {
                        key: "value",
                    },
                    created_at: "created_at",
                    labels: ["labels"],
                    name: "name",
                    summary: "summary",
                    uuid: "uuid",
                },
            ],
        });
    });
});
