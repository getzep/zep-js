/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../../mock-server/MockServerPool";
import * as Zep from "../../../src/api/index";
import { ZepClient } from "../../../src/Client";

describe("Node", () => {
    test("get_by_graph_id", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = [
            {
                attributes: { key: "value" },
                created_at: "created_at",
                labels: ["labels"],
                name: "name",
                score: 1.1,
                summary: "summary",
                uuid: "uuid",
            },
        ];
        server
            .mockEndpoint()
            .post("/graph/node/graph/graph_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.node.getByGraphId("graph_id", {});
        expect(response).toEqual([
            {
                attributes: {
                    key: "value",
                },
                createdAt: "created_at",
                labels: ["labels"],
                name: "name",
                score: 1.1,
                summary: "summary",
                uuid: "uuid",
            },
        ]);
    });

    test("get_by_user_id", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = {};
        const rawResponseBody = [
            {
                attributes: { key: "value" },
                created_at: "created_at",
                labels: ["labels"],
                name: "name",
                score: 1.1,
                summary: "summary",
                uuid: "uuid",
            },
        ];
        server
            .mockEndpoint()
            .post("/graph/node/user/user_id")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.node.getByUserId("user_id", {});
        expect(response).toEqual([
            {
                attributes: {
                    key: "value",
                },
                createdAt: "created_at",
                labels: ["labels"],
                name: "name",
                score: 1.1,
                summary: "summary",
                uuid: "uuid",
            },
        ]);
    });

    test("get_edges", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = [
            {
                attributes: { key: "value" },
                created_at: "created_at",
                episodes: ["episodes"],
                expired_at: "expired_at",
                fact: "fact",
                invalid_at: "invalid_at",
                name: "name",
                score: 1.1,
                source_node_uuid: "source_node_uuid",
                target_node_uuid: "target_node_uuid",
                uuid: "uuid",
                valid_at: "valid_at",
            },
        ];
        server
            .mockEndpoint()
            .get("/graph/node/node_uuid/entity-edges")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.node.getEdges("node_uuid");
        expect(response).toEqual([
            {
                attributes: {
                    key: "value",
                },
                createdAt: "created_at",
                episodes: ["episodes"],
                expiredAt: "expired_at",
                fact: "fact",
                invalidAt: "invalid_at",
                name: "name",
                score: 1.1,
                sourceNodeUuid: "source_node_uuid",
                targetNodeUuid: "target_node_uuid",
                uuid: "uuid",
                validAt: "valid_at",
            },
        ]);
    });

    test("get_episodes", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            episodes: [
                {
                    content: "content",
                    created_at: "created_at",
                    processed: true,
                    role: "role",
                    role_type: "norole",
                    score: 1.1,
                    session_id: "session_id",
                    source: "text",
                    source_description: "source_description",
                    uuid: "uuid",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/graph/node/node_uuid/episodes")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.graph.node.getEpisodes("node_uuid");
        expect(response).toEqual({
            episodes: [
                {
                    content: "content",
                    createdAt: "created_at",
                    processed: true,
                    role: "role",
                    roleType: "norole",
                    score: 1.1,
                    sessionId: "session_id",
                    source: "text",
                    sourceDescription: "source_description",
                    uuid: "uuid",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            attributes: { key: "value" },
            created_at: "created_at",
            labels: ["labels"],
            name: "name",
            score: 1.1,
            summary: "summary",
            uuid: "uuid",
        };
        server.mockEndpoint().get("/graph/node/uuid").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.graph.node.get("uuid");
        expect(response).toEqual({
            attributes: {
                key: "value",
            },
            createdAt: "created_at",
            labels: ["labels"],
            name: "name",
            score: 1.1,
            summary: "summary",
            uuid: "uuid",
        });
    });
});
