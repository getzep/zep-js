/**
 * This file was auto-generated by Fern from our API Definition.
 */

import { mockServerPool } from "../mock-server/MockServerPool";
import { ZepClient } from "../../src/Client";

describe("Thread", () => {
    test("list_all", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            response_count: 1,
            threads: [
                {
                    created_at: "created_at",
                    project_uuid: "project_uuid",
                    thread_id: "thread_id",
                    user_id: "user_id",
                    uuid: "uuid",
                },
            ],
            total_count: 1,
        };
        server.mockEndpoint().get("/threads").respondWith().statusCode(200).jsonBody(rawResponseBody).build();

        const response = await client.thread.listAll();
        expect(response).toEqual({
            responseCount: 1,
            threads: [
                {
                    createdAt: "created_at",
                    projectUuid: "project_uuid",
                    threadId: "thread_id",
                    userId: "user_id",
                    uuid: "uuid",
                },
            ],
            totalCount: 1,
        });
    });

    test("create", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { thread_id: "thread_id", user_id: "user_id" };
        const rawResponseBody = {
            created_at: "created_at",
            project_uuid: "project_uuid",
            thread_id: "thread_id",
            user_id: "user_id",
            uuid: "uuid",
        };
        server
            .mockEndpoint()
            .post("/threads")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.thread.create({
            threadId: "thread_id",
            userId: "user_id",
        });
        expect(response).toEqual({
            createdAt: "created_at",
            projectUuid: "project_uuid",
            threadId: "thread_id",
            userId: "user_id",
            uuid: "uuid",
        });
    });

    test("delete", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = { message: "message" };
        server
            .mockEndpoint()
            .delete("/threads/threadId")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.thread.delete("threadId");
        expect(response).toEqual({
            message: "message",
        });
    });

    test("get_user_context", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            context: "context",
            messages: [
                {
                    content: "content",
                    created_at: "created_at",
                    name: "name",
                    processed: true,
                    role: "norole",
                    uuid: "uuid",
                },
            ],
        };
        server
            .mockEndpoint()
            .get("/threads/threadId/context")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.thread.getUserContext("threadId");
        expect(response).toEqual({
            context: "context",
            messages: [
                {
                    content: "content",
                    createdAt: "created_at",
                    name: "name",
                    processed: true,
                    role: "norole",
                    uuid: "uuid",
                },
            ],
        });
    });

    test("get", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });

        const rawResponseBody = {
            messages: [
                {
                    content: "content",
                    created_at: "created_at",
                    name: "name",
                    processed: true,
                    role: "norole",
                    uuid: "uuid",
                },
            ],
            row_count: 1,
            total_count: 1,
        };
        server
            .mockEndpoint()
            .get("/threads/threadId/messages")
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.thread.get("threadId");
        expect(response).toEqual({
            messages: [
                {
                    content: "content",
                    createdAt: "created_at",
                    name: "name",
                    processed: true,
                    role: "norole",
                    uuid: "uuid",
                },
            ],
            rowCount: 1,
            totalCount: 1,
        });
    });

    test("add_messages", async () => {
        const server = mockServerPool.createServer();
        const client = new ZepClient({ apiKey: "test", environment: server.baseUrl });
        const rawRequestBody = { messages: [{ content: "content", role: "norole" }] };
        const rawResponseBody = { context: "context" };
        server
            .mockEndpoint()
            .post("/threads/threadId/messages")
            .jsonBody(rawRequestBody)
            .respondWith()
            .statusCode(200)
            .jsonBody(rawResponseBody)
            .build();

        const response = await client.thread.addMessages("threadId", {
            messages: [
                {
                    content: "content",
                    role: "norole",
                },
            ],
        });
        expect(response).toEqual({
            context: "context",
        });
    });
});
