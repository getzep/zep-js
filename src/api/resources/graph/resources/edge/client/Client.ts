/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "../../../../../../environments.js";
import * as core from "../../../../../../core/index.js";
import * as Zep from "../../../../../index.js";
import { mergeHeaders, mergeOnlyDefinedHeaders } from "../../../../../../core/headers.js";
import * as errors from "../../../../../../errors/index.js";

export declare namespace Edge {
    export interface Options {
        environment?: core.Supplier<environments.ZepEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class Edge {
    protected readonly _options: Edge.Options;

    constructor(_options: Edge.Options = {}) {
        this._options = _options;
    }

    /**
     * Returns all edges for a graph.
     *
     * @param {string} graphId - Graph ID
     * @param {Zep.GraphEdgesRequest} request
     * @param {Edge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Zep.BadRequestError}
     * @throws {@link Zep.InternalServerError}
     *
     * @example
     *     await client.graph.edge.getByGraphId("graph_id", {})
     */
    public getByGraphId(
        graphId: string,
        request: Zep.GraphEdgesRequest,
        requestOptions?: Edge.RequestOptions,
    ): core.HttpResponsePromise<Zep.EntityEdge[]> {
        return core.HttpResponsePromise.fromPromise(this.__getByGraphId(graphId, request, requestOptions));
    }

    private async __getByGraphId(
        graphId: string,
        request: Zep.GraphEdgesRequest,
        requestOptions?: Edge.RequestOptions,
    ): Promise<core.WithRawResponse<Zep.EntityEdge[]>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ZepEnvironment.Default,
                `graph/edge/graph/${encodeURIComponent(graphId)}`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Zep.EntityEdge[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Zep.BadRequestError(_response.error.body as Zep.ApiError, _response.rawResponse);
                case 500:
                    throw new Zep.InternalServerError(_response.error.body as Zep.ApiError, _response.rawResponse);
                default:
                    throw new errors.ZepError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ZepError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ZepTimeoutError("Timeout exceeded when calling POST /graph/edge/graph/{graph_id}.");
            case "unknown":
                throw new errors.ZepError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns all edges for a user.
     *
     * @param {string} userId - User ID
     * @param {Zep.GraphEdgesRequest} request
     * @param {Edge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Zep.BadRequestError}
     * @throws {@link Zep.InternalServerError}
     *
     * @example
     *     await client.graph.edge.getByUserId("user_id", {})
     */
    public getByUserId(
        userId: string,
        request: Zep.GraphEdgesRequest,
        requestOptions?: Edge.RequestOptions,
    ): core.HttpResponsePromise<Zep.EntityEdge[]> {
        return core.HttpResponsePromise.fromPromise(this.__getByUserId(userId, request, requestOptions));
    }

    private async __getByUserId(
        userId: string,
        request: Zep.GraphEdgesRequest,
        requestOptions?: Edge.RequestOptions,
    ): Promise<core.WithRawResponse<Zep.EntityEdge[]>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ZepEnvironment.Default,
                `graph/edge/user/${encodeURIComponent(userId)}`,
            ),
            method: "POST",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            contentType: "application/json",
            requestType: "json",
            body: request,
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Zep.EntityEdge[], rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Zep.BadRequestError(_response.error.body as Zep.ApiError, _response.rawResponse);
                case 500:
                    throw new Zep.InternalServerError(_response.error.body as Zep.ApiError, _response.rawResponse);
                default:
                    throw new errors.ZepError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ZepError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ZepTimeoutError("Timeout exceeded when calling POST /graph/edge/user/{user_id}.");
            case "unknown":
                throw new errors.ZepError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Returns a specific edge by its UUID.
     *
     * @param {string} uuid - Edge UUID
     * @param {Edge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Zep.BadRequestError}
     * @throws {@link Zep.NotFoundError}
     * @throws {@link Zep.InternalServerError}
     *
     * @example
     *     await client.graph.edge.get("uuid")
     */
    public get(uuid: string, requestOptions?: Edge.RequestOptions): core.HttpResponsePromise<Zep.EntityEdge> {
        return core.HttpResponsePromise.fromPromise(this.__get(uuid, requestOptions));
    }

    private async __get(
        uuid: string,
        requestOptions?: Edge.RequestOptions,
    ): Promise<core.WithRawResponse<Zep.EntityEdge>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ZepEnvironment.Default,
                `graph/edge/${encodeURIComponent(uuid)}`,
            ),
            method: "GET",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Zep.EntityEdge, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Zep.BadRequestError(_response.error.body as Zep.ApiError, _response.rawResponse);
                case 404:
                    throw new Zep.NotFoundError(_response.error.body as Zep.ApiError, _response.rawResponse);
                case 500:
                    throw new Zep.InternalServerError(_response.error.body as Zep.ApiError, _response.rawResponse);
                default:
                    throw new errors.ZepError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ZepError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ZepTimeoutError("Timeout exceeded when calling GET /graph/edge/{uuid}.");
            case "unknown":
                throw new errors.ZepError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    /**
     * Deletes an edge by UUID.
     *
     * @param {string} uuid - Edge UUID
     * @param {Edge.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @throws {@link Zep.BadRequestError}
     * @throws {@link Zep.InternalServerError}
     *
     * @example
     *     await client.graph.edge.delete("uuid")
     */
    public delete(uuid: string, requestOptions?: Edge.RequestOptions): core.HttpResponsePromise<Zep.SuccessResponse> {
        return core.HttpResponsePromise.fromPromise(this.__delete(uuid, requestOptions));
    }

    private async __delete(
        uuid: string,
        requestOptions?: Edge.RequestOptions,
    ): Promise<core.WithRawResponse<Zep.SuccessResponse>> {
        const _response = await (this._options.fetcher ?? core.fetcher)({
            url: core.url.join(
                (await core.Supplier.get(this._options.baseUrl)) ??
                    (await core.Supplier.get(this._options.environment)) ??
                    environments.ZepEnvironment.Default,
                `graph/edge/${encodeURIComponent(uuid)}`,
            ),
            method: "DELETE",
            headers: mergeHeaders(
                this._options?.headers,
                mergeOnlyDefinedHeaders({ ...(await this._getCustomAuthorizationHeaders()) }),
                requestOptions?.headers,
            ),
            timeoutMs: requestOptions?.timeoutInSeconds != null ? requestOptions.timeoutInSeconds * 1000 : 60000,
            maxRetries: requestOptions?.maxRetries,
            abortSignal: requestOptions?.abortSignal,
        });
        if (_response.ok) {
            return { data: _response.body as Zep.SuccessResponse, rawResponse: _response.rawResponse };
        }

        if (_response.error.reason === "status-code") {
            switch (_response.error.statusCode) {
                case 400:
                    throw new Zep.BadRequestError(_response.error.body as Zep.ApiError, _response.rawResponse);
                case 500:
                    throw new Zep.InternalServerError(_response.error.body as Zep.ApiError, _response.rawResponse);
                default:
                    throw new errors.ZepError({
                        statusCode: _response.error.statusCode,
                        body: _response.error.body,
                        rawResponse: _response.rawResponse,
                    });
            }
        }

        switch (_response.error.reason) {
            case "non-json":
                throw new errors.ZepError({
                    statusCode: _response.error.statusCode,
                    body: _response.error.rawBody,
                    rawResponse: _response.rawResponse,
                });
            case "timeout":
                throw new errors.ZepTimeoutError("Timeout exceeded when calling DELETE /graph/edge/{uuid}.");
            case "unknown":
                throw new errors.ZepError({
                    message: _response.error.errorMessage,
                    rawResponse: _response.rawResponse,
                });
        }
    }

    protected async _getCustomAuthorizationHeaders() {
        const apiKeyValue = (await core.Supplier.get(this._options.apiKey)) ?? process?.env["ZEP_API_KEY"];
        return { Authorization: `Api-Key ${apiKeyValue}` };
    }
}
