/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as serializers from "../../../../index";
import * as Zep from "../../../../../api/index";
import * as core from "../../../../../core";
import { SearchScope } from "../../../../types/SearchScope";
import { SearchType } from "../../../../types/SearchType";

export const SessionSearchQuery: core.serialization.Schema<
    serializers.SessionSearchQuery.Raw,
    Omit<Zep.SessionSearchQuery, "limit">
> = core.serialization.object({
    minScore: core.serialization.property("min_score", core.serialization.number().optional()),
    mmrLambda: core.serialization.property("mmr_lambda", core.serialization.number().optional()),
    recordFilter: core.serialization.property(
        "record_filter",
        core.serialization.record(core.serialization.string(), core.serialization.unknown()).optional()
    ),
    searchScope: core.serialization.property("search_scope", SearchScope.optional()),
    searchType: core.serialization.property("search_type", SearchType.optional()),
    sessionIds: core.serialization.property(
        "session_ids",
        core.serialization.list(core.serialization.string()).optional()
    ),
    text: core.serialization.string().optional(),
    userId: core.serialization.property("user_id", core.serialization.string().optional()),
});

export declare namespace SessionSearchQuery {
    interface Raw {
        min_score?: number | null;
        mmr_lambda?: number | null;
        record_filter?: Record<string, unknown> | null;
        search_scope?: SearchScope.Raw | null;
        search_type?: SearchType.Raw | null;
        session_ids?: string[] | null;
        text?: string | null;
        user_id?: string | null;
    }
}
