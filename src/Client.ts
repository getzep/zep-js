/**
 * This file was auto-generated by Fern from our API Definition.
 */

import * as environments from "./environments.js";
import * as core from "./core/index.js";
import { mergeHeaders } from "./core/headers.js";
import { Graph } from "./api/resources/graph/client/Client.js";
import { Thread } from "./api/resources/thread/client/Client.js";
import { User } from "./api/resources/user/client/Client.js";

export declare namespace ZepClient {
    export interface Options {
        environment?: core.Supplier<environments.ZepEnvironment | string>;
        /** Specify a custom URL to connect the client to. */
        baseUrl?: core.Supplier<string>;
        apiKey?: core.Supplier<string | undefined>;
        /** Additional headers to include in requests. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
        fetcher?: core.FetchFunction;
    }

    export interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
        /** Additional headers to include in the request. */
        headers?: Record<string, string | core.Supplier<string | undefined> | undefined>;
    }
}

export class ZepClient {
    protected readonly _options: ZepClient.Options;
    protected _graph: Graph | undefined;
    protected _thread: Thread | undefined;
    protected _user: User | undefined;

    constructor(_options: ZepClient.Options = {}) {
        this._options = {
            ..._options,
            headers: mergeHeaders(
                {
                    "X-Fern-Language": "JavaScript",
                    "X-Fern-SDK-Name": "zep-cloud",
                    "X-Fern-SDK-Version": "3.2.0",
                    "User-Agent": "zep-cloud/3.2.0",
                    "X-Fern-Runtime": core.RUNTIME.type,
                    "X-Fern-Runtime-Version": core.RUNTIME.version,
                },
                _options?.headers,
            ),
        };
    }

    public get graph(): Graph {
        return (this._graph ??= new Graph(this._options));
    }

    public get thread(): Thread {
        return (this._thread ??= new Thread(this._options));
    }

    public get user(): User {
        return (this._user ??= new User(this._options));
    }
}
